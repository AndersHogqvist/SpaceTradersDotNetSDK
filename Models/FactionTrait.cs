/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
 

namespace SpaceTradersDotNetSDK.Models
{
    /// <summary>
    /// FactionTrait
    /// </summary>
    [DataContract]
    public partial class FactionTrait :  IEquatable<FactionTrait>, IValidatableObject
    {
        /// <summary>
        /// The unique identifier of the trait.
        /// </summary>
        /// <value>The unique identifier of the trait.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum BUREAUCRATIC for value: BUREAUCRATIC
            /// </summary>
            [EnumMember(Value = "BUREAUCRATIC")]
            BUREAUCRATIC = 1,

            /// <summary>
            /// Enum SECRETIVE for value: SECRETIVE
            /// </summary>
            [EnumMember(Value = "SECRETIVE")]
            SECRETIVE = 2,

            /// <summary>
            /// Enum CAPITALISTIC for value: CAPITALISTIC
            /// </summary>
            [EnumMember(Value = "CAPITALISTIC")]
            CAPITALISTIC = 3,

            /// <summary>
            /// Enum INDUSTRIOUS for value: INDUSTRIOUS
            /// </summary>
            [EnumMember(Value = "INDUSTRIOUS")]
            INDUSTRIOUS = 4,

            /// <summary>
            /// Enum PEACEFUL for value: PEACEFUL
            /// </summary>
            [EnumMember(Value = "PEACEFUL")]
            PEACEFUL = 5,

            /// <summary>
            /// Enum DISTRUSTFUL for value: DISTRUSTFUL
            /// </summary>
            [EnumMember(Value = "DISTRUSTFUL")]
            DISTRUSTFUL = 6,

            /// <summary>
            /// Enum WELCOMING for value: WELCOMING
            /// </summary>
            [EnumMember(Value = "WELCOMING")]
            WELCOMING = 7,

            /// <summary>
            /// Enum ANARCHIST for value: ANARCHIST
            /// </summary>
            [EnumMember(Value = "ANARCHIST")]
            ANARCHIST = 8,

            /// <summary>
            /// Enum CONFLICTED for value: CONFLICTED
            /// </summary>
            [EnumMember(Value = "CONFLICTED")]
            CONFLICTED = 9,

            /// <summary>
            /// Enum AUTHORITARIAN for value: AUTHORITARIAN
            /// </summary>
            [EnumMember(Value = "AUTHORITARIAN")]
            AUTHORITARIAN = 10,

            /// <summary>
            /// Enum OLIGARCHICAL for value: OLIGARCHICAL
            /// </summary>
            [EnumMember(Value = "OLIGARCHICAL")]
            OLIGARCHICAL = 11,

            /// <summary>
            /// Enum DYNASTIC for value: DYNASTIC
            /// </summary>
            [EnumMember(Value = "DYNASTIC")]
            DYNASTIC = 12,

            /// <summary>
            /// Enum DEMOCRACTIC for value: DEMOCRACTIC
            /// </summary>
            [EnumMember(Value = "DEMOCRACTIC")]
            DEMOCRACTIC = 13,

            /// <summary>
            /// Enum DECENTRALIZED for value: DECENTRALIZED
            /// </summary>
            [EnumMember(Value = "DECENTRALIZED")]
            DECENTRALIZED = 14,

            /// <summary>
            /// Enum SMUGGLERS for value: SMUGGLERS
            /// </summary>
            [EnumMember(Value = "SMUGGLERS")]
            SMUGGLERS = 15,

            /// <summary>
            /// Enum SCAVENGERS for value: SCAVENGERS
            /// </summary>
            [EnumMember(Value = "SCAVENGERS")]
            SCAVENGERS = 16,

            /// <summary>
            /// Enum REBELLIOUS for value: REBELLIOUS
            /// </summary>
            [EnumMember(Value = "REBELLIOUS")]
            REBELLIOUS = 17,

            /// <summary>
            /// Enum EXILES for value: EXILES
            /// </summary>
            [EnumMember(Value = "EXILES")]
            EXILES = 18,

            /// <summary>
            /// Enum PIRATES for value: PIRATES
            /// </summary>
            [EnumMember(Value = "PIRATES")]
            PIRATES = 19,

            /// <summary>
            /// Enum RAIDERS for value: RAIDERS
            /// </summary>
            [EnumMember(Value = "RAIDERS")]
            RAIDERS = 20,

            /// <summary>
            /// Enum CLAN for value: CLAN
            /// </summary>
            [EnumMember(Value = "CLAN")]
            CLAN = 21,

            /// <summary>
            /// Enum GUILD for value: GUILD
            /// </summary>
            [EnumMember(Value = "GUILD")]
            GUILD = 22,

            /// <summary>
            /// Enum DOMINION for value: DOMINION
            /// </summary>
            [EnumMember(Value = "DOMINION")]
            DOMINION = 23,

            /// <summary>
            /// Enum FRINGE for value: FRINGE
            /// </summary>
            [EnumMember(Value = "FRINGE")]
            FRINGE = 24,

            /// <summary>
            /// Enum FORSAKEN for value: FORSAKEN
            /// </summary>
            [EnumMember(Value = "FORSAKEN")]
            FORSAKEN = 25,

            /// <summary>
            /// Enum ISOLATED for value: ISOLATED
            /// </summary>
            [EnumMember(Value = "ISOLATED")]
            ISOLATED = 26,

            /// <summary>
            /// Enum LOCALIZED for value: LOCALIZED
            /// </summary>
            [EnumMember(Value = "LOCALIZED")]
            LOCALIZED = 27,

            /// <summary>
            /// Enum ESTABLISHED for value: ESTABLISHED
            /// </summary>
            [EnumMember(Value = "ESTABLISHED")]
            ESTABLISHED = 28,

            /// <summary>
            /// Enum NOTABLE for value: NOTABLE
            /// </summary>
            [EnumMember(Value = "NOTABLE")]
            NOTABLE = 29,

            /// <summary>
            /// Enum DOMINANT for value: DOMINANT
            /// </summary>
            [EnumMember(Value = "DOMINANT")]
            DOMINANT = 30,

            /// <summary>
            /// Enum INESCAPABLE for value: INESCAPABLE
            /// </summary>
            [EnumMember(Value = "INESCAPABLE")]
            INESCAPABLE = 31,

            /// <summary>
            /// Enum INNOVATIVE for value: INNOVATIVE
            /// </summary>
            [EnumMember(Value = "INNOVATIVE")]
            INNOVATIVE = 32,

            /// <summary>
            /// Enum BOLD for value: BOLD
            /// </summary>
            [EnumMember(Value = "BOLD")]
            BOLD = 33,

            /// <summary>
            /// Enum VISIONARY for value: VISIONARY
            /// </summary>
            [EnumMember(Value = "VISIONARY")]
            VISIONARY = 34,

            /// <summary>
            /// Enum CURIOUS for value: CURIOUS
            /// </summary>
            [EnumMember(Value = "CURIOUS")]
            CURIOUS = 35,

            /// <summary>
            /// Enum DARING for value: DARING
            /// </summary>
            [EnumMember(Value = "DARING")]
            DARING = 36,

            /// <summary>
            /// Enum EXPLORATORY for value: EXPLORATORY
            /// </summary>
            [EnumMember(Value = "EXPLORATORY")]
            EXPLORATORY = 37,

            /// <summary>
            /// Enum RESOURCEFUL for value: RESOURCEFUL
            /// </summary>
            [EnumMember(Value = "RESOURCEFUL")]
            RESOURCEFUL = 38,

            /// <summary>
            /// Enum FLEXIBLE for value: FLEXIBLE
            /// </summary>
            [EnumMember(Value = "FLEXIBLE")]
            FLEXIBLE = 39,

            /// <summary>
            /// Enum COOPERATIVE for value: COOPERATIVE
            /// </summary>
            [EnumMember(Value = "COOPERATIVE")]
            COOPERATIVE = 40,

            /// <summary>
            /// Enum UNITED for value: UNITED
            /// </summary>
            [EnumMember(Value = "UNITED")]
            UNITED = 41,

            /// <summary>
            /// Enum STRATEGIC for value: STRATEGIC
            /// </summary>
            [EnumMember(Value = "STRATEGIC")]
            STRATEGIC = 42,

            /// <summary>
            /// Enum INTELLIGENT for value: INTELLIGENT
            /// </summary>
            [EnumMember(Value = "INTELLIGENT")]
            INTELLIGENT = 43,

            /// <summary>
            /// Enum RESEARCHFOCUSED for value: RESEARCH_FOCUSED
            /// </summary>
            [EnumMember(Value = "RESEARCH_FOCUSED")]
            RESEARCHFOCUSED = 44,

            /// <summary>
            /// Enum COLLABORATIVE for value: COLLABORATIVE
            /// </summary>
            [EnumMember(Value = "COLLABORATIVE")]
            COLLABORATIVE = 45,

            /// <summary>
            /// Enum PROGRESSIVE for value: PROGRESSIVE
            /// </summary>
            [EnumMember(Value = "PROGRESSIVE")]
            PROGRESSIVE = 46,

            /// <summary>
            /// Enum MILITARISTIC for value: MILITARISTIC
            /// </summary>
            [EnumMember(Value = "MILITARISTIC")]
            MILITARISTIC = 47,

            /// <summary>
            /// Enum TECHNOLOGICALLYADVANCED for value: TECHNOLOGICALLY_ADVANCED
            /// </summary>
            [EnumMember(Value = "TECHNOLOGICALLY_ADVANCED")]
            TECHNOLOGICALLYADVANCED = 48,

            /// <summary>
            /// Enum AGGRESSIVE for value: AGGRESSIVE
            /// </summary>
            [EnumMember(Value = "AGGRESSIVE")]
            AGGRESSIVE = 49,

            /// <summary>
            /// Enum IMPERIALISTIC for value: IMPERIALISTIC
            /// </summary>
            [EnumMember(Value = "IMPERIALISTIC")]
            IMPERIALISTIC = 50,

            /// <summary>
            /// Enum TREASUREHUNTERS for value: TREASURE_HUNTERS
            /// </summary>
            [EnumMember(Value = "TREASURE_HUNTERS")]
            TREASUREHUNTERS = 51,

            /// <summary>
            /// Enum DEXTEROUS for value: DEXTEROUS
            /// </summary>
            [EnumMember(Value = "DEXTEROUS")]
            DEXTEROUS = 52,

            /// <summary>
            /// Enum UNPREDICTABLE for value: UNPREDICTABLE
            /// </summary>
            [EnumMember(Value = "UNPREDICTABLE")]
            UNPREDICTABLE = 53,

            /// <summary>
            /// Enum BRUTAL for value: BRUTAL
            /// </summary>
            [EnumMember(Value = "BRUTAL")]
            BRUTAL = 54,

            /// <summary>
            /// Enum FLEETING for value: FLEETING
            /// </summary>
            [EnumMember(Value = "FLEETING")]
            FLEETING = 55,

            /// <summary>
            /// Enum ADAPTABLE for value: ADAPTABLE
            /// </summary>
            [EnumMember(Value = "ADAPTABLE")]
            ADAPTABLE = 56,

            /// <summary>
            /// Enum SELFSUFFICIENT for value: SELF_SUFFICIENT
            /// </summary>
            [EnumMember(Value = "SELF_SUFFICIENT")]
            SELFSUFFICIENT = 57,

            /// <summary>
            /// Enum DEFENSIVE for value: DEFENSIVE
            /// </summary>
            [EnumMember(Value = "DEFENSIVE")]
            DEFENSIVE = 58,

            /// <summary>
            /// Enum PROUD for value: PROUD
            /// </summary>
            [EnumMember(Value = "PROUD")]
            PROUD = 59,

            /// <summary>
            /// Enum DIVERSE for value: DIVERSE
            /// </summary>
            [EnumMember(Value = "DIVERSE")]
            DIVERSE = 60,

            /// <summary>
            /// Enum INDEPENDENT for value: INDEPENDENT
            /// </summary>
            [EnumMember(Value = "INDEPENDENT")]
            INDEPENDENT = 61,

            /// <summary>
            /// Enum SELFINTERESTED for value: SELF_INTERESTED
            /// </summary>
            [EnumMember(Value = "SELF_INTERESTED")]
            SELFINTERESTED = 62,

            /// <summary>
            /// Enum FRAGMENTED for value: FRAGMENTED
            /// </summary>
            [EnumMember(Value = "FRAGMENTED")]
            FRAGMENTED = 63,

            /// <summary>
            /// Enum COMMERCIAL for value: COMMERCIAL
            /// </summary>
            [EnumMember(Value = "COMMERCIAL")]
            COMMERCIAL = 64,

            /// <summary>
            /// Enum FREEMARKETS for value: FREE_MARKETS
            /// </summary>
            [EnumMember(Value = "FREE_MARKETS")]
            FREEMARKETS = 65,

            /// <summary>
            /// Enum ENTREPRENEURIAL for value: ENTREPRENEURIAL
            /// </summary>
            [EnumMember(Value = "ENTREPRENEURIAL")]
            ENTREPRENEURIAL = 66

        }

        /// <summary>
        /// The unique identifier of the trait.
        /// </summary>
        /// <value>The unique identifier of the trait.</value>
        [DataMember(Name="symbol", EmitDefaultValue=true)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactionTrait" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FactionTrait() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FactionTrait" /> class.
        /// </summary>
        /// <param name="symbol">The unique identifier of the trait. (required).</param>
        /// <param name="name">The name of the trait. (required).</param>
        /// <param name="description">A description of the trait. (required).</param>
        public FactionTrait(SymbolEnum symbol = default(SymbolEnum), string name = default(string), string description = default(string))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for FactionTrait and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FactionTrait and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for FactionTrait and cannot be null");
            }
            else
            {
                this.Description = description;
            }

        }


        /// <summary>
        /// The name of the trait.
        /// </summary>
        /// <value>The name of the trait.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the trait.
        /// </summary>
        /// <value>A description of the trait.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FactionTrait {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactionTrait);
        }

        /// <summary>
        /// Returns true if FactionTrait instances are equal
        /// </summary>
        /// <param name="input">Instance of FactionTrait to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactionTrait input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
