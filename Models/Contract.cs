/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
 

namespace SpaceTradersDotNetSDK.Models
{
    /// <summary>
    /// Contract
    /// </summary>
    [DataContract]
    public partial class Contract :  IEquatable<Contract>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PROCUREMENT for value: PROCUREMENT
            /// </summary>
            [EnumMember(Value = "PROCUREMENT")]
            PROCUREMENT = 1,

            /// <summary>
            /// Enum TRANSPORT for value: TRANSPORT
            /// </summary>
            [EnumMember(Value = "TRANSPORT")]
            TRANSPORT = 2,

            /// <summary>
            /// Enum SHUTTLE for value: SHUTTLE
            /// </summary>
            [EnumMember(Value = "SHUTTLE")]
            SHUTTLE = 3

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contract" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contract() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contract" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="factionSymbol">The symbol of the faction that this contract is for. (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="terms">terms (required).</param>
        /// <param name="accepted">Whether the contract has been accepted by the agent (required) (default to false).</param>
        /// <param name="fulfilled">Whether the contract has been fulfilled (required) (default to false).</param>
        /// <param name="expiration">The time at which the contract expires (required).</param>
        public Contract(string id = default(string), string factionSymbol = default(string), TypeEnum type = default(TypeEnum), ContractTerms terms = default(ContractTerms), bool accepted = false, bool fulfilled = false, DateTime expiration = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Contract and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "factionSymbol" is required (not null)
            if (factionSymbol == null)
            {
                throw new InvalidDataException("factionSymbol is a required property for Contract and cannot be null");
            }
            else
            {
                this.FactionSymbol = factionSymbol;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Contract and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "terms" is required (not null)
            if (terms == null)
            {
                throw new InvalidDataException("terms is a required property for Contract and cannot be null");
            }
            else
            {
                this.Terms = terms;
            }

            // to ensure "accepted" is required (not null)
            if (accepted == null)
            {
                throw new InvalidDataException("accepted is a required property for Contract and cannot be null");
            }
            else
            {
                this.Accepted = accepted;
            }

            // to ensure "fulfilled" is required (not null)
            if (fulfilled == null)
            {
                throw new InvalidDataException("fulfilled is a required property for Contract and cannot be null");
            }
            else
            {
                this.Fulfilled = fulfilled;
            }

            // to ensure "expiration" is required (not null)
            if (expiration == null)
            {
                throw new InvalidDataException("expiration is a required property for Contract and cannot be null");
            }
            else
            {
                this.Expiration = expiration;
            }

        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// The symbol of the faction that this contract is for.
        /// </summary>
        /// <value>The symbol of the faction that this contract is for.</value>
        [DataMember(Name="factionSymbol", EmitDefaultValue=true)]
        public string FactionSymbol { get; set; }


        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=true)]
        public ContractTerms Terms { get; set; }

        /// <summary>
        /// Whether the contract has been accepted by the agent
        /// </summary>
        /// <value>Whether the contract has been accepted by the agent</value>
        [DataMember(Name="accepted", EmitDefaultValue=true)]
        public bool Accepted { get; set; }

        /// <summary>
        /// Whether the contract has been fulfilled
        /// </summary>
        /// <value>Whether the contract has been fulfilled</value>
        [DataMember(Name="fulfilled", EmitDefaultValue=true)]
        public bool Fulfilled { get; set; }

        /// <summary>
        /// The time at which the contract expires
        /// </summary>
        /// <value>The time at which the contract expires</value>
        [DataMember(Name="expiration", EmitDefaultValue=true)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FactionSymbol: ").Append(FactionSymbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  Fulfilled: ").Append(Fulfilled).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contract);
        }

        /// <summary>
        /// Returns true if Contract instances are equal
        /// </summary>
        /// <param name="input">Instance of Contract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FactionSymbol == input.FactionSymbol ||
                    (this.FactionSymbol != null &&
                    this.FactionSymbol.Equals(input.FactionSymbol))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.Accepted == input.Accepted ||
                    (this.Accepted != null &&
                    this.Accepted.Equals(input.Accepted))
                ) && 
                (
                    this.Fulfilled == input.Fulfilled ||
                    (this.Fulfilled != null &&
                    this.Fulfilled.Equals(input.Fulfilled))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FactionSymbol != null)
                    hashCode = hashCode * 59 + this.FactionSymbol.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.Accepted != null)
                    hashCode = hashCode * 59 + this.Accepted.GetHashCode();
                if (this.Fulfilled != null)
                    hashCode = hashCode * 59 + this.Fulfilled.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }


            // FactionSymbol (string) minLength
            if(this.FactionSymbol != null && this.FactionSymbol.Length < 1)
            {
                yield return new ValidationResult("Invalid value for FactionSymbol, length must be greater than 1.", new [] { "FactionSymbol" });
            }

            yield break;
        }
    }

}
