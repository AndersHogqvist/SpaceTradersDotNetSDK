/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
 

namespace SpaceTradersDotNetSDK.Models
{
    /// <summary>
    /// System
    /// </summary>
    [DataContract]
    public partial class System :  IEquatable<System>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public SystemType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="System" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected System() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="System" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="sectorSymbol">sectorSymbol (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="x">x (required).</param>
        /// <param name="y">y (required).</param>
        /// <param name="waypoints">waypoints (required).</param>
        /// <param name="factions">factions (required).</param>
        public System(string symbol = default(string), string sectorSymbol = default(string), SystemType type = default(SystemType), int x = default(int), int y = default(int), List<SystemWaypoint> waypoints = default(List<SystemWaypoint>), List<SystemFaction> factions = default(List<SystemFaction>))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for System and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }

            // to ensure "sectorSymbol" is required (not null)
            if (sectorSymbol == null)
            {
                throw new InvalidDataException("sectorSymbol is a required property for System and cannot be null");
            }
            else
            {
                this.SectorSymbol = sectorSymbol;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for System and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new InvalidDataException("x is a required property for System and cannot be null");
            }
            else
            {
                this.X = x;
            }

            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new InvalidDataException("y is a required property for System and cannot be null");
            }
            else
            {
                this.Y = y;
            }

            // to ensure "waypoints" is required (not null)
            if (waypoints == null)
            {
                throw new InvalidDataException("waypoints is a required property for System and cannot be null");
            }
            else
            {
                this.Waypoints = waypoints;
            }

            // to ensure "factions" is required (not null)
            if (factions == null)
            {
                throw new InvalidDataException("factions is a required property for System and cannot be null");
            }
            else
            {
                this.Factions = factions;
            }

        }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets SectorSymbol
        /// </summary>
        [DataMember(Name="sectorSymbol", EmitDefaultValue=true)]
        public string SectorSymbol { get; set; }


        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=true)]
        public int X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=true)]
        public int Y { get; set; }

        /// <summary>
        /// Gets or Sets Waypoints
        /// </summary>
        [DataMember(Name="waypoints", EmitDefaultValue=true)]
        public List<SystemWaypoint> Waypoints { get; set; }

        /// <summary>
        /// Gets or Sets Factions
        /// </summary>
        [DataMember(Name="factions", EmitDefaultValue=true)]
        public List<SystemFaction> Factions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class System {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SectorSymbol: ").Append(SectorSymbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Waypoints: ").Append(Waypoints).Append("\n");
            sb.Append("  Factions: ").Append(Factions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as System);
        }

        /// <summary>
        /// Returns true if System instances are equal
        /// </summary>
        /// <param name="input">Instance of System to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(System input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SectorSymbol == input.SectorSymbol ||
                    (this.SectorSymbol != null &&
                    this.SectorSymbol.Equals(input.SectorSymbol))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Waypoints == input.Waypoints ||
                    this.Waypoints != null &&
                    input.Waypoints != null &&
                    this.Waypoints.SequenceEqual(input.Waypoints)
                ) && 
                (
                    this.Factions == input.Factions ||
                    this.Factions != null &&
                    input.Factions != null &&
                    this.Factions.SequenceEqual(input.Factions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SectorSymbol != null)
                    hashCode = hashCode * 59 + this.SectorSymbol.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Waypoints != null)
                    hashCode = hashCode * 59 + this.Waypoints.GetHashCode();
                if (this.Factions != null)
                    hashCode = hashCode * 59 + this.Factions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Symbol (string) minLength
            if(this.Symbol != null && this.Symbol.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Symbol, length must be greater than 1.", new [] { "Symbol" });
            }


            // SectorSymbol (string) minLength
            if(this.SectorSymbol != null && this.SectorSymbol.Length < 1)
            {
                yield return new ValidationResult("Invalid value for SectorSymbol, length must be greater than 1.", new [] { "SectorSymbol" });
            }

            yield break;
        }
    }

}
